#!/usr/bin/perl
# 
# OVHSMS
#
# (c) 2013 by Christoph Gross (gross@bluybte.de)
#
# OVHSMS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# OVHSMS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OVHSMS.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Send SMS using OVH SOAP API

use 5.010;
use strict;
use warnings;
use diagnostics;

use Try::Tiny;
use Getopt::Std;
use Config::IniFiles;
use MIME::Lite;
use SOAP::Lite on_fault => sub { my($soap, $res) = @_; die ref $res ? $res->faultstring : $soap->transport->status; };

my $version		= "0.3.0";
my $tempDir		= "/tmp/ovhsms/";
my $configFile	= "/etc/ovhsms.conf";
my $soap = SOAP::Lite
 -> uri('https://soapi.ovh.com/manager')
 -> proxy('https://www.ovh.com:1664');
our($email, $config, $account, $user, $password, $from, $to, $message, $unlock, $lockChannel, $send);

# Check if temp folder for lockfiles exists
unless(-e $tempDir or mkdir $tempDir) {
	print "Cannot create tempfolder: $tempDir\n";
	exit 1;
}

# Get CLI Options
our($opt_U, $opt_d, $opt_t, $opt_m, $opt_f, $opt_a, $opt_u, $opt_p, $opt_l, $opt_s, $opt_h);
getopt('Utmfaupld');	# With argument
getopts('sh');	# Bool

# Check if config file exist
unless(-e $configFile) {
	print "No config file found: $configFile\n";
	exit 1;
}

# Check if help requested
if($opt_h) {
	printHelp();
	exit 0;
}

# Load config
loadConfig();

# Send SMS?
if($send) {
	# Lock channel ?
	if($lockChannel) {
		# Only alphanum allowed
		if($lockChannel =~ m/^[[:alnum:]]+$/) {
			$lockChannel = $tempDir."LOCK_".$lockChannel;
		} else {
			print "Channel has to be alphanumeric\n";
			exit 1;
		}
		# Is channel already locked?
		if(-e $lockChannel) {
			print "This channel is locked\n";
			exit 1;
		} 
		# Lock channel and send sms
		else {
			`touch $lockChannel`;
			sendSMS();
		}
	} else {
		sendSMS();
	}
}
# Unlock channel? 
elsif($unlock) {
	# Only alphanum allowed
	if($unlock =~ m/^[[:alnum:]]+$/) {
		$unlock = $tempDir."LOCK_".$unlock;
		if($message) {
			# Send message if a LOCK file is present
			if(-e $unlock) {
				sendSMS();
			}
		}
		`rm -f $unlock`;
	} else {
		print "Channel has to be alphanumeric\n";
		exit 1;
	}
} 
# No Command given.
else {
	print "No command. Please specify either -s or -U \n";
	printHelp();
	exit 1;
}

sub sendSMS {
	# If -d send email instead of sms
	if($email) {
		sendEmail();
	} else {
		# Make sure mandatory options are present
		print "Option '-m message' is mandatory.\n" and exit 1 unless($message);
		print "User undefined \n" and exit 1 unless($user);
		print "Password undefined \n" and exit 1 unless($password);
		print "Account undefined \n" and exit 1 unless($account);
		print "From undefined \n" and exit 1 unless($from);
		print "To undefined \n" and exit 1 unless($to);

		# Fire SOAP call
		my $result;
		try {
			$result = $soap->call( 'telephonySmsUserSend' => ($user, $password, $account, $from, $to, $message, '', '', '', '', '', '', 0) );
			my $return = $result->result();
			print $return."\n";
			exit 0;
		} catch {
			print $_."\n";
		};	
	}	
}

sub loadConfig {
	$config = Config::IniFiles->new( -file => $configFile );
	# Empty config files throws error
	unless($config) {
		print "Config file empty\n";
		exit 1;
	}

	$account 	= ($opt_a) ? $opt_a : $config->val('Credentials', 'account');
	$user 		= ($opt_u) ? $opt_u : $config->val('Credentials', 'user');
	$password 	= ($opt_p) ? $opt_p : $config->val('Credentials', 'password');

	$to 	= ($opt_t) ? $opt_t : $config->val('SMS', 'to');
	$from 	= ($opt_f) ? $opt_f : $config->val('SMS', 'from');

	$send = ($opt_s) ? $opt_s : 0;
	$lockChannel = ($opt_l) ? $opt_l : 0;
	$unlock = ($opt_U) ? $opt_U : 0;
	$message = ($opt_m) ? $opt_m : 0;
	$email = ($opt_d) ? $opt_d : 0;

	#print Dumper $account, $user, $password, $to, $from;
}

sub sendEmail {
	my $date = `date`;
	my $emailText = <<EndEmail;
$message

==================================
Account: 	$account
User: 		$user
To:			$to
From:		$from
Send:		$send
LockChannel:	$lockChannel
UnlockChannel:	$unlock
==================================
$date
EndEmail
	my $msg = MIME::Lite->new(
		From 	=> "OVHSMS",
		To		=> $email,
		Subject	=> "OVHSMS - Debug",
		Data	=> $emailText
	);
	$msg->send;
}

sub printHelp {
	print <<EndHelp;
OVHSMS $version | (c) 2013 by Christoph Gross (gross\@blubyte.de)
Send SMS using OVH SOAP API

Commands:
	-s 		- Sends a SMS
	-U channel	- Unlocks a channel, use -m to send SMS if successful
	-h 		- This Help

Options:
	-m message		- The message of the SMS

	-t to			- Send to number (international format)
	-f from			- Sender number
	-a account		- SMS Account
	-u user			- SMS User
	-p password		- SMS User Password
	-l channel		- Lock given channel for given number to prevent
				  further notices
	-d email		- Debug, send Email instead

Configuration:
	Configfile should be under: $configFile. It uses the INI-Format:

	[Credentials]
	account=sms-gcxxxx-x
	user=XXXXX
	password=XXXXX

	[SMS]
	to=+49000000
	from=+49000000

EndHelp
}